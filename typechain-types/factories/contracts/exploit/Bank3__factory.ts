/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Bank3, Bank3Interface } from "../../../contracts/exploit/Bank3";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cfb806100206000396000f3fe60806040526004361061004e5760003560e01c806347e7ef241461005a578063c23f001f14610083578063f3fef3a3146100c0578063f6326fb3146100e9578063f7888aec146100f357610055565b3661005557005b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610885565b610130565b005b34801561008f57600080fd5b506100aa60048036038101906100a591906108c5565b610263565b6040516100b79190610914565b60405180910390f35b3480156100cc57600080fd5b506100e760048036038101906100e29190610885565b610288565b005b6100f1610495565b005b3480156100ff57600080fd5b5061011a600480360381019061011591906108c5565b610529565b6040516101279190610914565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101979061098c565b60405180910390fd5b6101cd3330838573ffffffffffffffffffffffffffffffffffffffff166105af909392919063ffffffff16565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461025891906109db565b925050819055505050565b6000602052816000526040600020602052806000526040600020600091509150505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561031057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610402573373ffffffffffffffffffffffffffffffffffffffff1681600067ffffffffffffffff81111561037857610377610a31565b5b6040519080825280601f01601f1916602001820160405280156103aa5781602001600182028036833780820191505090505b506040516103b89190610ada565b60006040518083038185875af1925050503d80600081146103f5576040519150601f19603f3d011682016040523d82523d6000602084013e6103fa565b606091505b505050610491565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161043d929190610b00565b602060405180830381600087803b15801561045757600080fd5b505af115801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190610b61565b505b5050565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461052091906109db565b92505081905550565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016105e393929190610b8e565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106319190610ada565b6000604051808303816000865af19150503d806000811461066e576040519150601f19603f3d011682016040523d82523d6000602084013e610673565b606091505b50915091506106b76040518060400160405280600881526020017f737563636573732000000000000000000000000000000000000000000000000081525083610727565b8180156106e057506000815114806106df5750808060200190518101906106de9190610b61565b5b5b61071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071690610c11565b60405180910390fd5b505050505050565b6107bf828260405160240161073d929190610c95565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506107c3565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061081c826107f1565b9050919050565b61082c81610811565b811461083757600080fd5b50565b60008135905061084981610823565b92915050565b6000819050919050565b6108628161084f565b811461086d57600080fd5b50565b60008135905061087f81610859565b92915050565b6000806040838503121561089c5761089b6107ec565b5b60006108aa8582860161083a565b92505060206108bb85828601610870565b9150509250929050565b600080604083850312156108dc576108db6107ec565b5b60006108ea8582860161083a565b92505060206108fb8582860161083a565b9150509250929050565b61090e8161084f565b82525050565b60006020820190506109296000830184610905565b92915050565b600082825260208201905092915050565b7f7a65726f41646472657373000000000000000000000000000000000000000000600082015250565b6000610976600b8361092f565b915061098182610940565b602082019050919050565b600060208201905081810360008301526109a581610969565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109e68261084f565b91506109f18361084f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a2657610a256109ac565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015610a94578082015181840152602081019050610a79565b83811115610aa3576000848401525b50505050565b6000610ab482610a60565b610abe8185610a6b565b9350610ace818560208601610a76565b80840191505092915050565b6000610ae68284610aa9565b915081905092915050565b610afa81610811565b82525050565b6000604082019050610b156000830185610af1565b610b226020830184610905565b9392505050565b60008115159050919050565b610b3e81610b29565b8114610b4957600080fd5b50565b600081519050610b5b81610b35565b92915050565b600060208284031215610b7757610b766107ec565b5b6000610b8584828501610b4c565b91505092915050565b6000606082019050610ba36000830186610af1565b610bb06020830185610af1565b610bbd6040830184610905565b949350505050565b7f21736166655472616e7366657246726f6d000000000000000000000000000000600082015250565b6000610bfb60118361092f565b9150610c0682610bc5565b602082019050919050565b60006020820190508181036000830152610c2a81610bee565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610c5882610c31565b610c62818561092f565b9350610c72818560208601610a76565b610c7b81610c3c565b840191505092915050565b610c8f81610b29565b82525050565b60006040820190508181036000830152610caf8185610c4d565b9050610cbe6020830184610c86565b939250505056fea2646970667358221220d1f2c17758bd70cbb903c025532af9c86428d8d0cde314d58a49a7511316db4764736f6c63430008090033";

type Bank3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Bank3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bank3__factory extends ContractFactory {
  constructor(...args: Bank3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Bank3> {
    return super.deploy(overrides || {}) as Promise<Bank3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bank3 {
    return super.attach(address) as Bank3;
  }
  override connect(signer: Signer): Bank3__factory {
    return super.connect(signer) as Bank3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Bank3Interface {
    return new utils.Interface(_abi) as Bank3Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bank3 {
    return new Contract(address, _abi, signerOrProvider) as Bank3;
  }
}
