/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Attacker,
  AttackerInterface,
} from "../../../contracts/reentrancy/Attacker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract Vault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610607380380610607833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6104f0806101176000396000f3fe60806040526004361061002d5760003560e01c80639e5faafc14610102578063fbfa77cf1461010c576100fd565b366100fd576100706040518060400160405280600f81526020017f5245434549564528292121212121210000000000000000000000000000000000815250610137565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f14210a6346040518263ffffffff1660e01b81526004016100c9919061034a565b600060405180830381600087803b1580156100e357600080fd5b505af11580156100f7573d6000803e3d6000fd5b50505050005b600080fd5b61010a6101d0565b005b34801561011857600080fd5b506101216102e4565b60405161012e91906103e4565b60405180910390f35b6101cd8160405160240161014b9190610498565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610308565b50565b600034905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6326fb3826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561023d57600080fd5b505af1158015610251573d6000803e3d6000fd5b505050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f14210a6826040518263ffffffff1660e01b81526004016102af919061034a565b600060405180830381600087803b1580156102c957600080fd5b505af11580156102dd573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000819050919050565b61034481610331565b82525050565b600060208201905061035f600083018461033b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006103aa6103a56103a084610365565b610385565b610365565b9050919050565b60006103bc8261038f565b9050919050565b60006103ce826103b1565b9050919050565b6103de816103c3565b82525050565b60006020820190506103f960008301846103d5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561043957808201518184015260208101905061041e565b83811115610448576000848401525b50505050565b6000601f19601f8301169050919050565b600061046a826103ff565b610474818561040a565b935061048481856020860161041b565b61048d8161044e565b840191505092915050565b600060208201905081810360008301526104b2818461045f565b90509291505056fea264697066735822122052d1582444beb00ad716f17c5c3af3b7c796b0b476e185abc106eb59801bd13464736f6c63430008090033";

type AttackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attacker__factory extends ContractFactory {
  constructor(...args: AttackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Attacker> {
    return super.deploy(_vault, overrides || {}) as Promise<Attacker>;
  }
  override getDeployTransaction(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  override attach(address: string): Attacker {
    return super.attach(address) as Attacker;
  }
  override connect(signer: Signer): Attacker__factory {
    return super.connect(signer) as Attacker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerInterface {
    return new utils.Interface(_abi) as AttackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Attacker {
    return new Contract(address, _abi, signerOrProvider) as Attacker;
  }
}
