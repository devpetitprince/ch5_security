//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "../libraries/SafeToken.sol";
import "../interfaces/IERC20.sol";
import "hardhat/console.sol";

contract Bank3 {
    using SafeToken for address;

    mapping(address => mapping(address => uint)) public balances;

    constructor() public {}

    receive() external payable {}

    function balanceOf(address user, address token) external view returns(uint) {
        return balances[user][token];
    }

    function deposit(address token, uint amount) public {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        // (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, msg.sender, address(this), amount));
        token.safeTransferFrom(msg.sender, address(this), amount);

        balances[msg.sender][token] += amount;
    }

    function depositETH() payable public {
        balances[msg.sender][address(0)] += msg.value;
    }

    function withdraw(address token, uint amount) external {
        require(balances[msg.sender][token] >= amount);

        if (token == address(0)) {
            msg.sender.call{value: amount}(new bytes(0));
        } else {
            IERC20(token).transfer(msg.sender, amount);
        }
    }
}
