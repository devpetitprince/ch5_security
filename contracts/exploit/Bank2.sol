//SPDX-License-Identifier: Unlicense
pragma solidity ^0.6.12;

import "hardhat/console.sol";

contract Bank2 {
    address private _owner;
    mapping (address => uint256) private _balances;
    mapping (address => bool) private _customers;
    address[] private _customerList;

    constructor() public {
        _owner = msg.sender;
    }

    function deposit() external payable {
        require(msg.value > 0, "amount is zero");
        _balances[msg.sender] = _balances[msg.sender] + msg.value;
        if (_customers[msg.sender] == false) {
            _customers[msg.sender] = true;
            _customerList.push(msg.sender);
        }
    }

    function withdraw() external {
        require(msg.sender == _owner, "only owner");

        for (uint i=0; i < _customerList.length; i++) {
            uint balance = _balances[_customerList[i]];
            delete _balances[_customerList[i]];
            payable(_customerList[i]).transfer(balance);
        }
    }
}